[gcode_macro _math_helper_macros]
description: jinjatsu math helper macros
gcode:
    #===========================================================================================< _math_helper
    
    #──────────────────────────< constant π >────────────────────────────
    {%- set pi = 3.141592653589793 -%}

    #──────────────────────────< factorial n! >──────────────────────────
    {%- macro fact(n) -%}
        {%- set ns = namespace(r=1.0) -%}
        {%- for i in range(2, n+1) -%}{%- set ns.r = ns.r * i -%}{%- endfor -%}
        {ns.r}
    {%- endmacro -%}

    #──────────────────────────< integer power x^k >────────────────────
    {%- macro ipow(x, k) -%}
        {%- set ns = namespace(r=1.0) -%}
        {%- for _ in range(k) -%}{%- set ns.r = ns.r * x -%}{%- endfor -%}
        {ns.r}
    {%- endmacro -%}

    #──────────────────────────< sqrt(x) – 3× Newton-Raphson >──────────
    {%- macro sqrt(x) -%}
        {%- set ns = namespace(g = x/2.0) -%}
        {%- for _ in range(3) -%}{%- set ns.g = 0.5 * (ns.g + x / ns.g) -%}{%- endfor -%}
        {ns.g}
    {%- endmacro -%}

    #──────────────────────────< sin(x) (rad) – 5-term Taylor >─────────
    {%- macro sin(x) -%}
        {%- set ns = namespace(term = x|float, sum = x|float) -%}
        {%- for n in range(1,5) -%}
            {%- set ns.term = ns.term * (-1.0) * x|float * x|float / ((2*n) * (2*n + 1)) -%}
            {%- set ns.sum  = ns.sum  + ns.term -%}
        {%- endfor -%}
        {ns.sum}
    {%- endmacro -%}

    #──────────────────────────< cos(x) (rad) – 5-term Taylor >─────────
    {%- macro cos(x) -%}
        {%- set ns = namespace(term = 1.0, sum = 1.0) -%}
        {%- for n in range(1,5) -%}
            {%- set ns.term = ns.term * (-1.0) * x|float * x|float / ((2*n - 1) * (2*n)) -%}
            {%- set ns.sum  = ns.sum  + ns.term -%}
        {%- endfor -%}
        {ns.sum}
    {%- endmacro -%}

    #──────────────────────────< atan2(y,x) – 5-term series >───────────
    {%- macro atan2(y, x) -%}
        {%- set a = 0.0 -%}
        {%- if x|float == 0.0 -%}
            {%- set a = (pi/2) if y|float >= 0 else -(pi/2) -%}
        {%- else -%}
            {%- set z = y|float / x|float -%}
            {%- set sign = -1.0 if z < 0 else 1.0 -%}
            {%- set z = z * sign -%}
            {%- set atan = (pi/2.0) - (z/(1.0 + 0.28*z*z)) if z > 1.0 else z/(1.0 + 0.28*z*z) -%}
            {%- set a = sign * atan -%}
            {%- if x < 0 -%}
                {%- set a = a + pi if y >= 0 else a - pi -%}
            {%- endif -%}
        {%- endif -%}
        {ns.a}
    {%- endmacro -%}

    #──────────────────────────< Calculates the average of a list of numbers.
    {%- macro average(numbers) -%} 
        {- numbers|sum / numbers|length if numbers else 0 -} 
    {%- endmacro -%}

    #──────────────────────────< Calculates the median of a list of numbers.
    {%- macro median(numbers) -%}
        {%- set sorted_list = numbers|sort -%}
        {%- set count = sorted_list|length -%}
        {%- if count == 0 -%}
             {0}
        {%- elif count % 2 == 1 -%}
            {sorted_list[count // 2]}
        {%- else -%}
            {(sorted_list[count // 2 - 1] + sorted_list[count // 2]) / 2.0}
        {%- endif -%}
    {%- endmacro -%}

    #──────────────────────────< Calculates the standard deviation of a list of numbers.
    {%- macro stddev(numbers) -%}
        {%- if numbers|length < 2 -%}
            {0.0}
        {%- else -%}
            {%- set mean = average(numbers) -%}
            {%- set variance_sum = namespace(value=0) -%}
            {%- for x in numbers -%}
                {%- set variance_sum.value = variance_sum.value + (x - mean)**2 -%}
            {%- endfor -%}
            {sqrt(variance_sum.value / numbers|length)}
        {%- endif -%}
    {%- endmacro -%}

    #──────────────────────────< calculate distance between two points
    {%- macro point_distance(p1, p2) -%}
        {%- set dx = p1[0] - p2[0] -%}
        {%- set dy = p1[1] - p2[1] -%}
        {%- set dz = p1[2] - p2[2] -%}
        {sqrt(dx*dx + dy*dy + dz*dz)}
    {%- endmacro -%}

    #──────────────────────────< DIRECT CALL/TESTING
    {%- if rawparams and 'DATA' in params -%}
        {action_respond_info("returned: " ~ self._TemplateReference__context[params.MACRO](params.DATA))}
    {%- elif rawparams and 'MACRO' in params -%}
        {action_respond_info("returned: " ~ self._TemplateReference__context[params.MACRO]())}
    {%- endif -%}
