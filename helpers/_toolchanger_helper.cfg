[gcode_macro _toolchanger_helper_macros]
gcode:
    #===========================================================================================< LOCALS/SETTINGS

    {% set round_svf = (printer['gcode_macro _toolchanger_settings'].get('offset_calibration', {})).get('value_rounding', 3)|int %}
    {% set _cache = namespace(tn=None) %}
    {% set _svf_key_state, _gcode_variable_key_state = {}, {} %}
    #===========================================================================================< IO/INTERNALS

    #────────────────────────────────────────────────────< RESPOND HELPERS
    {%- macro respond_colored(msg, prefix, color) -%}
        {- action_respond_info('<span class="' ~ color ~ '">' ~ ('<strong>' ~ prefix|trim ~ ' </strong>' if prefix else '') ~ msg ~ '</span>') -}
    {%- endmacro -%}

    {%- macro _msg_info(msg = '') -%}                     {- action_respond_info(msg) -}                       {%- endmacro -%}
    {%- macro _msg_warn(msg = '', prefix='[Warning]') -%} {- respond_colored(msg, prefix, 'warning--text') -}  {%- endmacro -%}
    {%- macro _msg_error(msg = '', prefix='[ERROR]')  -%} {- respond_colored(msg, prefix, 'error--text') -}    {%- endmacro -%}
    {%- macro _raise_error(msg = '') -%}                  {- action_raise_error(msg) -}                        {%- endmacro -%}

    # ---< error proof divide
    {%- macro divide(numerator, denominator, precision=3) -%}
        {%- set num, den, result = numerator|float(None), denominator|float(None), numerator -%}
        {%- if num is none or den is none -%} {- _msg_warn("cannot perform" ~ numerator ~ "/" ~ denominator, '[DIV_ERR]') -}
        {%- elif den == 0.0 -%} {- _msg_warn("(" ~ numerator ~ "/" ~ denominator ~ ")", '[DIV_BY_0]') -}
        {%- else -%}{%- set result = (num / den)|round(precision|int(3)) -%}{%- endif -%}
        {result}
    {%- endmacro -%}

    #===========================================================================================< TRANSLATION/LOOKUP HELPER

    #────────────────────────────────────────────────────< EASY LOOKUP
    # ---< searches for the number if its present in tool probes
    {%- macro get_probe_name_from_tn(tool_number) -%}
        {%- set ns = namespace(result='') -%}
        {%- set found = 0 -%}
        {%- for k, v in printer.configfile.settings.items() if k[:11] == 'tool_probe ' and v.tool|default(-1) == tool_number|int -%}
            {%- set ns.result = k -%}
            {%- set found = found + 1 -%}
        {%- endfor -%}
        {%- if found > 1 -%}
            {- _msg_error("Multiple probes found for tool_number " ~ tool_number) -}
        {%- endif -%}
        {ns.result if ns.result else _msg_error("cannot find probe for tool '" ~ tool_number ~ "'")}
    {%- endmacro -%}

    # ---< gets the target from a tn
    {%- macro get_tool_target(tool_number) -%}
        {%- set tool_name = printer.toolchanger.tool_names[tool_number|int] -%}
        {%- set extruder_name = printer[tool_name].extruder -%}
        {%- if extruder_name and extruder_name in printer -%}
            {printer[extruder_name].target}
        {%- else -%}{-1}{_msg_warn("cannot get tool '" ~ tool_number ~ "' target, has extruder")}{%- endif -%}
    {%- endmacro -%}

    # ---< gets the temp from a tn
    {%- macro get_tool_temp(tool_number) -%}
        {%- set tool_name = printer.toolchanger.tool_names[tool_number|int] -%}
        {%- set extruder_name = printer[tool_name].extruder -%}
        {%- if extruder_name and extruder_name in printer -%}
            {printer[extruder_name].temperature}
        {%- else -%}{-1}{_msg_warn("cannot get tool '" ~ tool_number ~ "' temp, has extruder")}{%- endif -%}
    {%- endmacro -%}

    #────────────────────────────────────────────────────< LIVE STATE LOOKUP/EDIT
    
    # ---< actively pulls in a fresh result and caches it (state wont change in this ref frame, no need to repoll)
    {%- macro get_mounted_tn() -%}
        {%- if _cache.tn is none -%}
            {%- set tpe_obj = printer.printer.lookup_object('tool_probe_endstop') -%}
            {%- set probes = tpe_obj._query_open_tools() -%}
            {%- if probes|length == 1 -%}
                {%- set _ = tpe_obj.set_active_probe(probes[0]) -%}
                {%- set _cache.tn = probes[0].tool -%}
            {%- else -%}
                {%- set _cache.tn = -1 -%}
            {%- endif -%}
            {%- if probes|length > 1 -%}{_msg_warn("Multiple active tool probes!? please check your hardware/config!")}{%- endif -%}
        {%- endif -%}
        {_cache.tn}
    {%- endmacro -%}

    # ---< push SVF probe offset -> tool probe offset
    {%- macro update_tool_probe_from_svf(tool_number) -%}
        {%- set tn = tool_number|int -%}
        {%- set tool_name = printer.toolchanger.tool_names[tn] -%}
        {%- set svf_key = 'offsets_' ~ tool_name|replace('tool ', '')|lower -%}
        {%- set offsets = _svf_key_state.get(svf_key, printer.save_variables.variables.get(svf_key, {})) -%}
        {%- if 'probe' in offsets and (offsets.probe is number) -%}
            {%- set probe_obj = printer.printer.lookup_object('tool_probe_endstop').tool_probes[tn] -%}
            {%- set _ = probe_obj.probe_offsets.__setattr__('z_offset', offsets.probe) -%}
            {_msg_info("Applied probe offset for " ~ probe_obj.name ~ " (" ~ offsets.probe ~ ")")}
        {%- else -%}
            {_msg_warn("Missing probe offset for " ~ tool_name ~ " in " ~ svf_key)}
        {%- endif -%}
    {%- endmacro -%}

    # ---< push tools SVF gcode offsets -> toolchanger tools gcode offsets
    {%- macro update_tool_offsets_from_svf(tool_number) -%}
        {%- set tn = tool_number|int -%}
        {%- set tool_name = printer.toolchanger.tool_names[tn] -%}
        {%- set tool_obj = printer.printer.lookup_object(tool_name) -%}
        {%- set svf_key = 'offsets_' ~ tool_name|replace('tool ', '')|lower -%}
        {%- set offsets = _svf_key_state.get(svf_key, printer.save_variables.variables.get(svf_key, {})) -%}
        {%- for axis in ['x', 'y', 'z'] if axis in offsets -%}
            {%- set _ = tool_obj.__setattr__('gcode_' ~ axis ~ '_offset', offsets[axis]) -%}
            {- _msg_info("Applied " ~ axis ~ " offset for " ~ tool_name ~ " (" ~ offsets[axis] ~ ")") -}
        {%- else -%}
            {- _msg_warn("Missing " ~ axis ~ " offset for " ~ tool_name ~ " in " ~ svf_key) -}
        {%- endfor -%}
    {%- endmacro -%}

    # ---< push SVF calibration probes TTBZ -> tools calibrate trigger to bottom z
    {%- macro update_ttbz_from_svf() -%}
        {%- set probe_pos  = _svf_key_state.get('probe_position', printer.save_variables.variables.get('probe_position', None)) -%}
        {%- set ttbz = probe_pos.get('trigger_to_bottom_z', None) -%}
        {% if ttbz is not none %}
            {%- set _ = printer.printer.lookup_object('tools_calibrate').__setattr__('trigger_to_bottom_z', ttbz|float) -%}
            {- _msg_info("Updated trigger_to_bottom_z (" ~ ttbz ~ ")") -}
        {%- else -%}
            {- _msg_warn("Failed to update ttbz") -}
        {%- endif -%}
    {%- endmacro -%}

    #===========================================================================================< MISC HELPERS

    # ---< save to variable while also keeping state locally (no issues with saving and restoring in the same exec frame)
    {%- macro save_tool_targets_to_variable(macro, variable, turn_heaters_off = False) -%}
        {%- if "gcode_macro " ~ macro in printer and variable|string|lower in printer["gcode_macro " ~ macro] -%}
            {%- set original = printer["gcode_macro " ~ macro].get(variable|string|lower, {}) -%}
            {%- set temps = original if original is mapping else {} -%}
            {%- for tn in p.toolchanger.tool_numbers -%}
                {%- set _ = temps.update({tn: get_tool_target(tn)|float}) -%}
                {%- if turn_heaters_off -%}M104 T{tn} S0{%- endif -%}
            {%- endfor -%}
            SET_GCODE_VARIABLE MACRO="{macro}" VARIABLE="{variable}" VALUE="{temps}"
            {%- set _ = _gcode_variable_key_state.update({macro ~ '.' ~ variable: temps}) -%}
        {%- else -%}
            {- _msg_warn("macro '" ~ macro ~ "' not found in printer or variable '" ~ variable ~ "' not found in macro") -}
        {%- endif -%}
    {%- endmacro -%}

    # ---< restores from variable (or this local frame)
    {%- macro restore_tool_targets_from_variable(macro, variable, command='M104') -%}
        {%- if "gcode_macro " ~ macro in printer and variable|string|lower in printer["gcode_macro " ~ macro] -%}
            {%- set saved_temps = _gcode_variable_key_state.get(macro ~ '.' ~ variable, printer["gcode_macro " ~ macro].get(variable|string|lower, {})) -%}
            {%- for tn, temp in saved_temps.items() if saved_temps and saved_temps is mapping -%}
                {command} T{tn|int} S{temp|float}
            {%- else -%}
                {- _msg_warn("Data in '" ~ variable ~ "' is not a valid temperature dictionary.") -}
            {%- endfor -%}
        {%- else -%}
            {- _msg_warn("Cannot restore temps: macro '" ~ macro ~ "' or variable '" ~ variable ~ "' not found. (or empty/not mapping)") -}
        {%- endif -%}
    {%- endmacro -%}

    {%- macro divide_vel(vel_divide=1.0, accel_divide=1.0) -%}
        {%- set accel    = printer.toolchanger.params_fast_accel|default(printer.configfile.config.printer.max_accel)|float    -%}
        {%- set velocity = printer.toolchanger.params_fast_speed|default(printer.configfile.config.printer.max_velocity)|float -%}
        SET_VELOCITY_LIMIT VELOCITY={divide(velocity, vel_divide)} ACCEL={divide(accel, accel_divide)}
    {%- endmacro -%}

    {%- macro restore_vel() -%}
        SET_VELOCITY_LIMIT VELOCITY={printer.toolhead.max_velocity} ACCEL={printer.toolhead.max_accel}
    {%- endmacro -%}

    #────────────────────────────────────────────────────< SAVE VARIABLES EDITOR

    # ---< recursively rounds all values in a dict in place
    {%- macro _deep_round_inplace(data, precision) -%}
        {%- for k, v in data.items() if data is mapping -%}
            {%- if v is mapping -%}
                {_deep_round_inplace(v, precision)}
            {%- elif v is number -%}
                {%- set _ = data.update({k: v|float|round(precision)}) -%}
            {%- endif -%}
        {%- endfor -%}
    {%- endmacro -%}

    # ---< update a key in the save variable file, may be nested. may be called repeatedly (keeps state)
    {%- macro svf_update(path=None, value=None) -%}
        {%- if path is none or value is none -%}
            {- _msg_warn("svf_update requires path and value (" ~ path ~ ": " ~ value ~ " were given)") -}
        {%- else -%}
            {%- set path_parts = (path|string|trim).split('.') -%}
            {%- set variable_name = path_parts.pop(0) -%}
            {%- set root_data = _svf_key_state.get(variable_name, printer.save_variables.variables.get(variable_name, {})) -%}
            {%- set root_data = {} if root_data is not mapping else root_data -%}

            {%- if path_parts -%}
                {%- set final_value = value|round(round_svf) if value is number else value -%}
                {%- set ns = namespace(ptr=root_data) -%}
                {%- for key in path_parts[:-1] -%}
                    {%- set ns.ptr = ns.ptr.setdefault(key, {}) -%}
                {%- endfor -%}
                {%- set _ = ns.ptr.update({path_parts[-1]: final_value}) -%}
            {%- elif value is mapping -%}
                { _deep_round_inplace(value, round_svf) }
                {%- set _ = root_data.update(value) -%}
            {%- else -%}
                {%- set final_value = value|float|round(round_svf) if value is number else value -%}
                {%- set root_data = final_value -%}
            {%- endif -%}
            {%- set _ = _svf_key_state.update({variable_name: root_data}) -%}
            SAVE_VARIABLE VARIABLE={variable_name} VALUE="{root_data}"
        {%- endif -%}
    {%- endmacro -%}

    # ---< easily add/substract to values in the save variable file, may also be nested. 
    {%- macro svf_edit_value(path=None, value_to_add=None) -%}
        {%- if path is none or value_to_add is none -%}
            {- _msg_warn("svf_edit_value requires path and value (" ~ path ~ ": " ~ value_to_add ~ " were given)") -}
        {%- else -%}
            {%- set path_parts = (path|string|trim).split('.') -%}
            {%- set var_name = path_parts[0] -%}
            {%- set keys = path_parts[1:] -%}
            {%- set root_data = _svf_key_state.get(var_name, printer.save_variables.variables.get(var_name, {})) -%}

            {%- set ns = namespace(ptr=root_data) -%}
            {%- for key in keys -%}
                {%- set ns.ptr = ns.ptr[key] if ns.ptr is mapping and key in ns.ptr else 0 -%}
            {%- endfor -%}
            {%- set current_value = 0 if ns.ptr is mapping else ns.ptr -%}

            {%- set num_current, num_to_add = current_value|float(None), value_to_add|float(None) -%}
            {%- if num_current is none or num_to_add is none -%}
                {- _msg_warn("Cannot add, non-numeric value at path '" ~ path ~ "'", '[SVF_ERR]') -}
            {%- else -%}
                {- svf_update(path, num_current + num_to_add) -}
            {%- endif -%}
        {%- endif -%}
    {%- endmacro -%}

    #===========================================================================================< STATE CHECKING
    {%- macro check_homed() -%}
        {%- if printer.toolhead.homed_axes != "xyz" -%}
            {%- if printer.configfile.settings.toolchanger.on_axis_not_homed == 'home' -%}
                {- _msg_info("Homing first...") -}
                G28
            {%- else -%}
                {- _raise_error("Printer must be homed first.") -}
            {%- endif -%}
        {%- endif -%}
    {%- endmacro -%}

    {%- macro check_tc_status() -%}
        {%- if printer.toolchanger.status == 'uninitialized' -%}
            {- _msg_info("Toolchanger uninitialized, attempting to initialize...") -}
            INITIALIZE_TOOLCHANGER
        {%- elif printer.toolchanger.status == 'error' -%}
            {- _raise_error("Toolchanger is in an error state.") -}
        {%- endif -%}
    {%- endmacro -%}

    {%- macro check_tn_actn() -%}
        {%- set tn = printer.toolchanger.tool_number|int -%}
        {%- set actn = printer.tool_probe_endstop.active_tool_number|int -%}
        {%- if tn != actn or actn == -1 or tn == -1 -%}
            {- _msg_info("Something seems wrong here... trying to recover") -}
            {%- set actn = get_mounted_tn() -%}
            {%- if actn != -1 -%}
                INITIALIZE_TOOLCHANGER T={new_tn}
            {%- else -%}
                {- _raise_error("Nope... definetly no tool on there right now.") -}
            {%- endif -%}
        {%- endif -%}
    {%- endmacro -%}

    {%- macro check_ok() -%}
        {check_tc_status()}
        {check_homed()}
    {%- endmacro -%}

    #===========================================================================================< DIRECT CALL/TESTING
    {%- if rawparams and 'DATA' in params -%}
        {_msg_info("returned: " ~ self._TemplateReference__context[params.MACRO](params.DATA))}
    {%- elif rawparams and 'MACRO' in params -%}
        {_msg_info("returned: " ~ self._TemplateReference__context[params.MACRO]())}
    {%- endif -%}
