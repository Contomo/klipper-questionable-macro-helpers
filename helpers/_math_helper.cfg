[gcode_macro _math_helper_macros]
description: "jinjatsu math helper macros"
gcode:
   #──────────────────────────< constant π >────────────────────────────
    {%- set const_pi = 3.141592653589793 -%}
    {%- set const_two_pi = 6.283185307179586 -%}

    #──────────────────────────< Angle Conversions >──────────────────────────
    {%- set deg_to_rad = const_pi / 180.0 -%}
    {%- set rad_to_deg = 180.0 / const_pi -%}

    {%- macro degrees(radians) -%}
        {radians|float * rad_to_deg}
    {%- endmacro -%}
    
    {%- macro radians(degrees) -%}
        {degrees|float * deg_to_rad}
    {%- endmacro -%}

    {%- macro sign(n) -%}
        {1 if n|float > 0 else -1 if n|float < 0 else 0}
    {%- endmacro -%}

    #──────────────────────────< utility >──────────────────────────
    {%- macro clamp(value, min_val, max_val) -%}
        {[[value|float, max_val|float]|min, min_val|float]|max}
    {%- endmacro -%}

    {%- macro lerp(a, b, t) -%} #(linear interpolate)
        {a|float + (b|float - a|float) * t|float}
    {%- endmacro -%}

    {%- macro map(value, in_min, in_max, out_min, out_max) -%}
        {(value|float - i_min|float) * (o_max|float - o_min|float) / (i_max|float - i_min|float) + o_min|float}
    {%- endmacro -%}

    #────────────────────────< e stuffs >────────────────────────
    {%- set const_e  = 2.718281828459045 -%}
    #---< Exponential exp(x)
    {%- macro exp(x, terms=10) -%}
        {%- set ns = namespace(sum=1.0, term=1.0) -%}
        {%- for n in range(1, terms|int) -%}
            {%- set ns.term = ns.term * x|float / n|float -%}
            {%- set ns.sum = ns.sum + ns.term -%}
        {%- endfor -%}
        {ns.sum}
    {%- endmacro -%}

    #--< Natural Logarithm ln(x)
    {%- macro ln(x, terms=10) -%}
        {%- if x|float <= 0.0 -%}
            {0.0}
        {%- else -%}
            {%- set y = (x|float - 1) / (x|float + 1) -%}
            {%- set ns = namespace(sum=0.0, ypow=y) -%}
            {%- for n in range(terms|int) -%}
                {%- set ns.sum = ns.sum + ns.ypow / 2*n + 1 -%}
                {%- set ns.ypow = ns.ypow * y * y -%}
            {%- endfor -%}
            {2.0 * ns.sum}
        {%- endif -%}
    {%- endmacro -%}

    {%- macro log10(x, terms=10) -%}
        {%- set ln10 = 2.302585092994046 -%}
        {ln(x, terms)|float / ln10}
    {%- endmacro -%}

    {%- macro log(x, base, terms=10) -%}
        {ln(x, terms)|float / ln(base, terms)|float}
    {%- endmacro -%}


    #────────────────────────< Factorial >────────────────────────
    {%- macro fact(n) -%}
        {%- set ns = namespace(r=1) -%}
        {%- for i in range(2, n|int + 1) -%}
            {%- set ns.r = ns.r * i -%}
        {%- endfor -%}
        {ns.r}
    {%- endmacro -%}


    #──────────────────────────< sin(x) (rad) Taylor >─────────
    {%- macro sin(x, terms=5) -%}
        {%- set x_norm = ((x|float + const_pi) % const_two_pi) - const_pi -%}
        {%- set ns = namespace(s=0.0) -%}
        {%- for n in range(terms) -%}
            {%- set sign = 1 if (n % 2 == 0) else -1 -%}
            {%- set ns.s = ns.s + sign * x_norm**(2*n+1) / fact(2*n+1)|float -%}
        {%- endfor -%}
        {ns.s}
    {%- endmacro -%}

    {%- macro arsin(x) -%}
        {atan2(x, (1 - x|float**2) ** 0.5)}
    {%- endmacro -%}


    #──────────────────────────< cos(x) (rad) Taylor >─────────
    {%- macro cos(x, terms=5) -%}
        {%- set x_norm = ((x|float + const_pi) % const_two_pi) - const_pi -%}
        {%- set ns = namespace(s=0.0) -%}
        {%- for n in range(terms|int) -%}
            {%- set sign = 1 if (n % 2 == 0) else -1 -%}
            {%- set ns.s = ns.s + sign * x_norm**(2*n) / fact(2*n)|float -%}
        {%- endfor -%}
        {ns.s}
    {%- endmacro -%}

    {%- macro acos(x) -%}
        {atan2((1 - x|float**2) ** 0.5, x)}
    {%- endmacro -%}


    #──────────────────────────< tan >─────────
    {%- macro tan(x) -%}
        {sin(x)|float / cos(x)|float}
    {%- endmacro -%}

    {%- macro atan(x) -%}
        {atan2(x, 1.0)}
    {%- endmacro -%}

    #──────────────────────────< atan2(y,x) – 5-term series >───────────
    {%- macro atan2(y, x) -%}
        {%- set ns = namespace(angle = 0.0) -%}
        {%- set x_f = x|float -%}
        {%- set y_f = y|float -%}
        {%- if x_f == 0.0 -%}
            {%- set ns.angle = (const_pi / 2.0) if y_f >= 0 else -(const_pi / 2.0) -%}
        {%- else -%}
            {%- set z = y_f / x_f -%}
            {%- set sign = -1.0 if z < 0 else 1.0 -%}
            {%- set z_abs = z * sign -%}
            {%- set atan_approx = (const_pi / 2.0) - (z_abs / (z_abs*z_abs + 0.28)) if z_abs > 1.0 else z_abs / (1.0 + 0.28 * z_abs*z_abs) -%}
            {%- set ns.angle = sign * atan_approx -%}
            {%- if x_f < 0.0 -%}
                {%- set ns.angle = ns.angle + const_pi if y_f >= 0 else ns.angle - const_pi -%}
            {%- endif -%}
        {%- endif -%}
        { ns.angle }
    {%- endmacro -%}

    #──────────────────────────< stubs >──────────
    {%- macro pow(x, e) -%}
        {x|float**e|float}
    {%- endmacro -%}

    {%- macro sqrt(x) -%}
        {x|float**0.5}
    {%- endmacro -%}
