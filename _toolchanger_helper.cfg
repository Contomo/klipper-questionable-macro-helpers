[gcode_macro _toolchanger_helper]
gcode:
    #=======================================================< TRANSLATION HELPER
    # ---< actual probe name from tn
    {%- macro get_probe_name_from_tn(target_tool_num) -%}
        {%- set ns = namespace(result='not found') -%}
        {%- for k, v in printer.configfile.settings.items() if k[:11] == 'tool_probe ' and v.tool|default(-1) == target_tool_num|int -%}
            {%- set ns.result = k -%}
        {%- endfor -%}
        {ns.result}
    {%- endmacro -%}

    # ---< get tools target temperature from number
    {%- macro get_tool_target(tool_number) -%}
        {%- set tool_name = printer.toolchanger.tool_names[tool_number|int] -%}
        {%- set extruder_name = printer[tool_name].extruder -%}
        {%- if extruder_name and extruder_name in printer -%}
            {printer[extruder_name].target}
        {%- else -%}{-1}{%- endif -%}
    {%- endmacro -%}

    # ---< get tools temperature from number
    {%- macro get_tool_temp(tool_number) -%}
        {%- set tool_name = printer.toolchanger.tool_names[tool_number|int] -%}
        {%- set extruder_name = printer[tool_name].extruder -%}
        {%- if extruder_name and extruder_name in printer -%}
            {printer[extruder_name].temperature}
        {%- else -%}{-1}{%- endif -%}
    {%- endmacro -%}

    #=======================================================< SAVE VARIABLES EDITOR
    # ---< live state helper 
    {%- set _svf_key_state = {} -%}

    # ---< updates the requested key (forces dick)
    {%- macro svf_update(variable_name, new_data) -%}
        {%- set current_data = svf_get(variable_name, {}) -%}
        {%- if current_data is not mapping -%}{% set current_data = {} %}{%- endif -%}
        {%- set _ = current_data.update(new_data) -%}
        {%- set _ = svf_tracker.update({variable_name: current_data}) -%}
        SAVE_VARIABLE VARIABLE={variable_name} VALUE="{current_data}"
    {%- endmacro -%}

    # ---< svf get helper (cause svf doesnt update in our local scope)
    {%- macro svf_get(variable_name, default=None) -%}
        {_svf_key_state.get(variable_name, printer.save_variables.variables.get(variable_name, default)) }
    {%- endmacro -%}
    
    # ---<  pushes save variable file data into our live state
    {%- macro update_tool_from_svf(tool_number) -%}
        {%- set tn = tool_number|int -%}
        {%- set tool_name = printer.toolchanger.tool_names[tn] -%}
        {%- set probe_name = get_probe_name_from_tn(tn) -%}
        {%- set svf_key = 'offsets_' ~ tool_name|replace('tool ', '')|lower -%}
        {%- set offsets = svf_get(svf_key, {}) -%}
        {%- if 'x' in offsets and 'y' in offsets and 'z' in offsets -%}
            {%- set tool_obj = printer.printer.lookup_object(tool_name) -%}
            {%- set _ = tool_obj.__setattr__('gcode_x_offset', offsets.x) -%}
            {%- set _ = tool_obj.__setattr__('gcode_y_offset', offsets.y) -%}
            {%- set _ = tool_obj.__setattr__('gcode_z_offset', offsets.z) -%}
            {action_respond_info("Applied G-Code offsets to " ~ tool_name ~ ": " ~ offsets)}
        {%- else -%}
            {action_respond_info("Warning: No complete offsets found for " ~ tool_name ~ " in " ~ svf_key)}
        {%- endif -%}
        {%- if 'probe' in offsets -%}
            {%- set probe_obj = printer.printer.lookup_object(probe_name) -%}
            {%- set _ = probe_obj.probe_offsets.__setattr__('z_offset', offsets.probe) -%}
            {action_respond_info("Applied probe offset to " ~ probe_name ~ ": " ~ offsets.probe)}
        {%- else -%}
            {action_respond_info("Warning: No probe offset found for " ~ tool_name ~ " in " ~ svf_key)}
        {%- endif -%}
    {%- endmacro -%}


    #=======================================================< STATE CHECKS
    # ---< check if homed, if not: home or abort
    {%- macro check_homed() -%}
        {%- set th = printer.toolhead -%}
        {%- if th.homed_axes != "xyz" -%}
            {%- if printer.configfile.settings.toolchanger.on_axis_not_homed == 'home' -%}
                {action_respond_info("Homing required, executing G28...")}
                G28
            {%- else -%}
                {action_raise_error("Printer must be homed first. (on_axis_not_homed is set to abort)")}
            {%- endif -%}
        {%- endif -%}
    {%- endmacro -%}

    # ---< Checks if toolchanger is initialized, and initializes if not.
    {%- macro check_initialized() -%}
        {%- if printer.toolchanger.status == 'uninitialized' -%}
            {action_respond_info("Toolchanger uninitialized, attempting to initialize...")}
            INITIALIZE_TOOLCHANGER
        {%- elif printer.toolchanger.status == 'error' -%}
            {action_raise_error("Toolchanger is in an error state.")}
        {%- endif -%}
    {%- endmacro -%}

    # ---< gets the actual live mounted toolnumber from the tool probe
    {%- macro get_mounted_tn() -%}
        {%- set tpe_obj = printer.printer.lookup_object('tool_probe_endstop') -%}
        {%- set open_probes = tpe_obj._query_open_tools() -%}
        {%- if open_probes|length == 1 -%}
            {%- set _ = tpe_obj.set_active_probe(probes[0]) %}
            {open_probes[0].tool}
        {%- else -%}
            {-1}
        {%- endif -%}
    {%- endmacro -%}

    # ---< allows us to call the macro directly and test the individual macros.
    {%- if rawparams -%}
        RESPOND MSG="returned: {self._TemplateReference__context[params.MACRO](params.DATA)}"
    {%- endif -%}
