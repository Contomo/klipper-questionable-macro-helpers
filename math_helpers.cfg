[gcode_macro _math_helpers]
description: jinja math helper macros
gcode:
    #=======================================================< _math_helpers
    # ---< Calculates the square root of a number.
    {%- macro sqrt(n) -%} { n**0.5 } {%- endmacro -%}

    # ---< Calculates the average of a list of numbers.
    {%- macro average(numbers) -%}
        {%- if numbers -%} { numbers|sum / numbers|length } {%- else -%} { 0 } {%- endif -%}
    {%- endmacro -%}

    # ---< Calculates the median of a list of numbers.
    {%- macro median(numbers) -%}
        {%- set sorted_list = numbers|sort -%}
        {%- set count = sorted_list|length -%}
        {%- if count == 0 -%}
            { 0 }
        {%- elif count % 2 == 1 -%}
            { sorted_list[count // 2] }
        {%- else -%}
            { (sorted_list[count // 2 - 1] + sorted_list[count // 2]) / 2.0 }
        {%- endif -%}
    {%- endmacro -%}

    # ---< Calculates the standard deviation of a list of numbers.
    {%- macro stddev(numbers) -%}
        {%- set n = numbers|length -%}
        {%- if n < 2 -%}{ 0.0 }
        {%- else -%}
            {%- set mean = average(numbers) -%}
            {%- set variance_sum = namespace(value=0) -%}
            {%- for x in numbers -%}
                {%- set _ = variance_sum.__setattr__('value', variance_sum.value + (x - mean)**2) -%}
            {%- endfor -%}
            {sqrt(variance_sum.value / n)}
        {%- endif -%}
    {%- endmacro -%}

    # ---< calculate distance between two points
    {%- macro point_distance(p1, p2) -%}
        {%- set dx = p1[0] - p2[0] -%}
        {%- set dy = p1[1] - p2[1] -%}
        {%- set dz = p1[2] - p2[2] -%}
        {sqrt(dx*dx + dy*dy + dz*dz)}
    {%- endmacro -%}
