

# EXAMPLE SETUP FOR TOOLHEAD
#
# [neopixel T0_leds]
# pin: et0:PD3
# chain_count: 11
# color_order: GRB, GRB, GRB, GRB, GRB, GRB, GRB, GRB, GRBW, GRBW, GRB
# initial_RED: 0.0
# initial_GREEN: 0.0
# initial_BLUE: 0.0
# initial_WHITE: 0.0
# 
# [gcode_macro _T0_vars]
# variable_logo_led_name:         "T0_leds"
# variable_logo_idx:              "1,2,3,4,5,6,7,8,11"
# variable_logo_brightness:       "1,1,1,1,1,1,1,1,0.4" # my last led is too bright otherwise 
# variable_nozzle_led_name:       "T0_leds"
# variable_nozzle_idx:            "9,10"
# variable_nozzle_brightness:     "1,1" # add it or leave it (the variable), defaults to 1.0 anyways.
# gcode:

# variable_nozzle_led_name    <- the name of the led object
# variable_nozzle_idx         <- the inidicies of that led object corresponding to nozzle
# variable_nozzle_brightness  <- brightess corresponding to idx




[gcode_macro _toolchanger_led_vars]
# ---< NAMED: rainbow, fast-equals-bright
variable_invert:        False # ---< Invert the current status color probing. (if false, 'probing' color used instead.)
variable_force_updates: True  # ---< add (1/255 or 0) to the largest channel every half a second to force updates
variable_debug:         ''    # ---< list of toolnumbers to show console debug output on (only idx0 of logo)
variable_colors: { 
    'logo': { 
        'busy'         :{'r':1.00, 'g':0.00, 'b':0.50, 'w':0.00},
        'ready'        :{'r':0.10, 'g':0.10, 'b':0.10, 'w':0.10}, #'rainbow',
        'idle'         :{'r':0.01, 'g':0.01, 'b':0.01, 'w':0.00},
        'homing'       :{'r':0.30, 'g':1.00, 'b':0.00, 'w':0.00},
        'leveling'     :{'r':0.00, 'g':0.60, 'b':1.00, 'w':0.00},
        #'probing'      :'gradient-rgb param_from=0.3,1.0,0.0 param_to=0.0,0.6,1.0 param_speed=0',
        'printing'     :'gradient-rgb param_from=1.0,0.0,0.5 param_to=0.0,0.5,1.0 param_speed=0.1',
        'changing'     :{'r':0.00, 'g':0.00, 'b':1.00, 'w':0.00},
        'changed'      :{'r':0.00, 'g':0.80, 'b':1.00, 'w':0.00},
        'calibrating'  :{'r':0.00, 'g':1.00, 'b':0.00, 'w':0.00},
        'paused'       :'rainbow',
        'error'        :{'r':1.00, 'g':0.00, 'b':0.00, 'w':0.00},
        'off'          :{'r':0.00, 'g':0.00, 'b':0.00, 'w':0.00}, # manual status
        'meshing'      :{'r':0.20, 'g':1.00, 'b':0.00, 'w':0.00}, # manual status
        'cleaning'     :'gradient-rgb param_from=1.0,0.0,0.0 param_to=0.0,0.7,0.0 param_speed=0',
    },
    'nozzle': {
        'hot'          :{'r':1.00, 'g':0.05, 'b':0.00, 'w':0.01},
        'cold'         :{'r':0.00, 'g':0.30, 'b':0.20, 'w':0.03},
        # these may be named types too \/
        'on'           :{'r':0.90, 'g':0.90, 'b':0.90, 'w':1.00},
        'off'          :{'r':0.00, 'g':0.00, 'b':0.00, 'w':0.00},
        'ready'        :{'r':0.10, 'g':0.10, 'b':0.10, 'w':0.20},
        'idle'         :{'r':0.00, 'g':0.01, 'b':0.01, 'w':0.00},
    },
  }
variable_status: {} # ---< status overwrite dict{'logo':{'0': 'busy', '1....}, 'nozzle':{....}} assigned by status overwrites
variable_cache:  {}  # ---< contains info at runtime like led mappings, nozzle brush location etc...
gcode: # <- This section is required.  Do Not Delete.


# The follow parameters are automatically handed on to templates.
# they may be overwritting in the `_toolchanger_led_vars` file, or extra provided.
#
# - param_max_idx
# - param_idx
# - param_tn

#---------------------------------< name says it all
[display_template fast-equals-bright]
text:
  {% set p = printer.motion_report.live_velocity|abs/100 %}
  {p},{p},{p},{p}


[display_template gradient-rgb]
param_from:    "0.0, 0.0, 0.0" # start
param_to:      "0.0, 0.0, 0.0" # end
param_speed:   0.20            # 0 -> static | 1 -> once a second
# automatically parsed \/
param_idx:     0
param_max_idx: 0 
text:
  {% set idx     = param_idx|int %}
  {% set max_i   = [1, param_max_idx|int]|max %}
  {% set p_from  = (param_from|trim).split(',')|map('float')|list %}
  {% set p_to    = (param_to  |trim).split(',')|map('float')|list %}
  {% set speed   = param_speed|float %}
  {% set now     = printer.toolhead.estimated_print_time %}

  {% set t_raw   = (idx / max_i) + now * speed %}
  {% set t       = t_raw - t_raw|int %}

  {% set r = p_from[0] + (p_to[0] - p_from[0]) * t|float %}
  {% set g = p_from[1] + (p_to[1] - p_from[1]) * t|float %}
  {% set b = p_from[2] + (p_to[2] - p_from[2]) * t|float %}

  {r},{g},{b},{0}


#---------------------------------< change max idx for gradient (larger -> longer rainbow, shorter -> more rainbow)
[display_template rainbow]
param_idx: 0
param_max_idx: 0
text:
  {% set num_leds = param_max_idx|float + 1.0 %}
  {% set idx = param_idx|float %}
  {% set print_time = printer.toolhead.estimated_print_time|float / 30.0 %}
  {% set hue = (idx / num_leds + print_time) %}
  {% set hue = hue - (hue|int) %}
  # ---< HSV rainbow math: v=1, s=1, hue=0..1
  {% set h = hue * 6.0 %}
  {% set i = h|int %}
  {% set f = h - i %}
  {% set q = 1.0 - f %}
  {% set rgb_map = [
    [1.0, f, 0.0],
    [q, 1.0, 0.0],
    [0.0, 1.0, f],
    [0.0, q, 1.0],
    [f, 0.0, 1.0],
    [1.0, 0.0, q]
  ] %}
  {% set r = rgb_map[i % 6][0] %}
  {% set g = rgb_map[i % 6][1] %}
  {% set b = rgb_map[i % 6][2] %}
  {r},{g},{b},0


[display_template different-color-per-tool]
param_tn: None
text:
  {% if param_tn == 0 %}
    1,0,0,0
  {% elif param_tn == 1 %}
    0,1,0,0
  {% else %} # etc....
    0,0,1,0
  {% endif %}



